% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/g_patient_profile.R
\name{g_patient_profile}
\alias{g_patient_profile}
\title{Patient Profile Plot}
\usage{
g_patient_profile(select_ex = TRUE, select_ae = TRUE,
  select_rs = TRUE, select_cm = TRUE, select_lb = TRUE, ex_data,
  ex_var_names, ae_data, ae_var_names, ae_line_col,
  ae_line_col_legend = NULL, ae_line_col_opt = NULL, rs_data,
  rs_var_names, cm_data, cm_var_names, lb_data, lb_var_names,
  arrow_end_day, ylim = c(-28, 250), ylab = "Study Days",
  title = "Patient Profile")
}
\arguments{
\item{select_ex}{boolean value for showing EX domain plot, default is \code{TRUE}}

\item{select_ae}{boolean value for showing AE domain plot, default is \code{TRUE}}

\item{select_rs}{boolean value for showing RS domain plot, default is \code{TRUE}}

\item{select_cm}{boolean value for showing CM domain plot, default is \code{TRUE}}

\item{select_lb}{boolean value for showing LB domain plot, default is \code{TRUE}}

\item{ex_data}{dataframe for EX domain dataset}

\item{ex_var_names}{vector to identify each lane of EX domain plot}

\item{ae_data}{dataframe for AE domain dataset}

\item{ae_var_names}{vector to identify each lane of AE domain plot}

\item{ae_line_col}{factor vector to specify color for segments of AE domain plot}

\item{ae_line_col_legend}{string to be displayed as line color legend title of AE domain plot, default is \code{NULL}}

\item{ae_line_col_opt}{aesthetic values to map line color values of AE domain plot
(named vector to map color values to each name).
If not \code{NULL}, please make sure this contains all posible values for \code{ae_line_col} values,
otherwise color will be assigned by \code{ggplot} default, please note that \code{NULL} needs to be specified}

\item{rs_data}{dataframe for RS domain dataset}

\item{rs_var_names}{vector to identify each lane of RS domain plot}

\item{cm_data}{dataframe for CM domain dataset}

\item{cm_var_names}{vector to identify each lane of CM domain plot}

\item{lb_data}{dataframe for LB domain dataset}

\item{lb_var_names}{vector to identify each lane of LB domain plot}

\item{arrow_end_day}{numeric value indicates the end of arrow when arrows are requested}

\item{ylim}{numeric vector for y-axis limit that will be shared by all domain plots, default is
\code{ylim = c(-28, 250)}}

\item{ylab}{string to be shown as y-axis label, default is \code{"Study Days"}}

\item{title}{string to be shown as title of the plot, default is \code{"Patient Profile"}}
}
\value{
plot object
}
\description{
Patient profile plot provides detailed information for a specific subject participating in the study.
The plot includes relevant data for one subject that can help correlate adverse events, concomitant medications,
exposures, labs, etc. The plotting of patient profile is modularized,
each domain plot is one module, generated by function \code{patient_domain_profile},
function \code{g_patient_profile} assembles
all requested domain plots into one patient profile.
}
\examples{
library(osprey)

#' #Data preparation
sl_start_date <- "TRTSDT"

## ADSL
rADSL <- radsl(cached = TRUE) # nolint
ADSL <-  rADSL \%>\% # nolint
  group_by(.data$USUBJID) \%>\%
  mutate(TRTSDT = as.Date(.data$TRTSDTM, "\%d\%b\%Y"),
         max_date = max(as.Date(.data$LSTALVDT, "\%d\%b\%Y"), as.Date(.data$DTHDT, "\%d\%b\%Y")),
  ) \%>\%
  mutate(max_day = as.numeric(as.Date(.data$max_date) -
  as.Date(eval(parse(text = sl_start_date)))) + 1) \%>\%
  filter(USUBJID == rADSL$USUBJID[1])

## ADAE
rADAE <- radae(cached = TRUE) # nolint
ADAE <- merge(ADSL, rADAE, by = c("STUDYID", "USUBJID")) \%>\% as.data.frame() # nolint

ADAE <- ADAE \%>\% # nolint
  mutate(ASTDY = ceiling(as.numeric(difftime(ASTDTM, as.Date(eval(parse(text = sl_start_date))),
                                             units = "days"))),
         AENDY = ceiling(as.numeric(difftime(AENDTM, as.Date(eval(parse(text = sl_start_date))),
                                             units = "days")))) \%>\%
  select(USUBJID, AESOC, AEDECOD, AESER, AETOXGR, AREL, ASTDY, AENDY)

## ADRS
rADRS <- radrs(cached = TRUE) #nolint
# ADRS
ADRS <- merge(ADSL, rADRS, by = c("STUDYID", "USUBJID")) \%>\% as.data.frame() # nolint
ADRS <- ADRS \%>\% # nolint
  mutate(ADY = ceiling(as.numeric(difftime(ADTM,
  as.Date(eval(parse(text = sl_start_date))), units = "days")))) \%>\%
  select(USUBJID, PARAMCD, PARAM, AVALC, AVAL, ADY, ADTM) \%>\%
  filter(is.na(ADY) == FALSE)

#ADRS_var <- c("OVR", "BOR", "CBOR")
#ADRS <- ADRS \%>\%
#filter(PARAMCD \%in\% ADRS_var)

## ADCM
rADCM <- radcm(cached = TRUE) # nolint
# ADCM
ADCM <- merge(ADSL, rADCM, by = c("STUDYID", "USUBJID")) \%>\% as.data.frame() #nolint
ADCM <- ADCM \%>\% # nolint
  mutate(ASTDY = ceiling(as.numeric(difftime(ASTDTM, as.Date(eval(parse(text = sl_start_date))),
                                             units = "days"))),
         AENDY = ceiling(as.numeric(difftime(AENDTM, as.Date(eval(parse(text = sl_start_date))),
                                             units = "days")))) \%>\%
  select(USUBJID, CMDECOD, ASTDTM, AENDTM, ASTDY, AENDY)

if (length(unique(ADCM$USUBJID)) > 0) {
  ADCM <- ADCM[which(ADCM$AENDY >= -28 | is.na(ADCM$AENDY) == TRUE
  & is.na(ADCM$ASTDY) == FALSE), ]
}

## ADEX
rADEX <- radex(cached = TRUE) # nolint
ADEX <- merge(ADSL, rADEX, by = c("STUDYID", "USUBJID")) # nolint
ADEX <- ADEX \%>\% # nolint
  filter(PARCAT1 == "INDIVIDUAL" & PARAMCD == "DOSE" & !is.na(AVAL)) \%>\%
  mutate(ASTDT_dur = as.numeric(as.Date(ASTDT, "\%d-\%b-\%y") -
  as.Date(eval(parse(text = sl_start_date)), "\%d\%b\%Y")) + 1) \%>\%
  select(USUBJID, ASTDT, PARCAT2, AVAL, AVALU, PARAMCD, TRTSDT)

ADEX <- split(ADEX, ADEX$USUBJID) \%>\% # nolint
  lapply(function(pinfo) {
    pinfo \%>\%
      arrange(PARCAT2, PARAMCD) \%>\%
      ungroup \%>\%
      mutate(diff = c(0, diff(AVAL, lag = 1))) \%>\%
      mutate(Modification = case_when(diff < 0 ~ "Decrease",
                                      diff > 0 ~ "Increase",
                                      diff == 0 ~ "None")) \%>\%
      mutate(ASTDT_dur = as.numeric(as.Date(ASTDT, "\%d-\%b-\%y") -
                                      as.Date(eval(parse(text = sl_start_date)), "\%d\%b\%Y")) + 1)
  })  \%>\%
  Reduce(rbind, .) \%>\%
  as.data.frame


## ADLB
rADLB <- radlb(cached = TRUE) # nolint
ADLB <- merge(ADSL, rADLB, by = c("STUDYID", "USUBJID")) # nolint
ADLB <- ADLB \%>\% # nolint
  group_by(USUBJID) \%>\%
  mutate(LBSTRESC = as.numeric(.data$LBSTRESC),
         ANRIND = factor(.data$ANRIND, levels = c("HIGH", "LOW", "NORMAL"))) \%>\%
  filter(is.na(.data$LBSTRESC) == FALSE & is.na(.data$ANRIND) == FALSE) \%>\%
  as.data.frame
ADLB <- ADLB \%>\%  # nolint
  mutate(ADY = ceiling(as.numeric(difftime(.data$ADTM,
                                           as.Date(eval(parse(text = sl_start_date))),
                                           units = "days"))))
# Example Patient Profile plot 5 domains
g_patient_profile(select_ex = TRUE,
                  select_ae = TRUE,
                  select_rs = TRUE,
                  select_cm = TRUE,
                  select_lb = TRUE,
                  ex_data = ADEX,
                  ex_var_names = ADEX$PARCAT2,
                  ae_data = ADAE,
                  ae_var_names = ADAE$AEDECOD,
                  ae_line_col = factor(ADAE$AESER),
                  ae_line_col_legend = "Serious",
                  ae_line_col_opt = c("Y" = "red", "N" = "blue"),
                  rs_data = ADRS,
                  rs_var_names = ADRS$PARAMCD,
                  cm_data = ADCM,
                  cm_var_names = ADCM$CMDECOD,
                  lb_data = ADLB,
                  lb_var_names = ADLB$LBTESTCD,
                  arrow_end_day = ADSL$max_day,
                  ylim = c(-28, 250),
                  ylab = "Study Days",
                  title = paste("Patient Profile: ", ADSL$USUBJID))
}
\author{
Xuefeng Hou (houx14) \email{houx14@gene.com}

Ting Qi (qit3) \email{qit3@gene.com}
}
